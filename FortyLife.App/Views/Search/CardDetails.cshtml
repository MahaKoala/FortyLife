@using System.Globalization
@using FortyLife.Core
@using FortyLife.Data
@using FortyLife.Data.Scryfall
@model Card

@{
    ViewBag.Title = Model.Name;
    var rulings = new ScryfallRequestEngine().RulingsRequest(Model.RulingsUri);
    var notes = $"This card's converted mana cost is {Model.Cmc.ToString(CultureInfo.InvariantCulture).Replace(".0", string.Empty)}. ";
    notes += Model.Colors != null && Model.Colors.Count > 0 ? $"This card's Color{(Model.Colors.Count > 1 ? $"s are {CardParsingEngine.FormatColor(Model.Colors)}. " : $" is {CardParsingEngine.FormatColor(Model.Colors)}. ")}" : "This card is Colorless. ";
    notes += Model.ColorIdentity != null && Model.ColorIdentity.Count > 0 ? $"This card's Color {(Model.ColorIdentity.Count > 1 ? $"Identities are {CardParsingEngine.FormatColor(Model.ColorIdentity)}. " : $"Identity is {CardParsingEngine.FormatColor(Model.ColorIdentity)}. ")}" : "This card's Color identity is Colorless. ";
    if (Model.Reserved)
    {
        notes += "This card is on the <a href='https://magic.wizards.com/en/articles/archive/official-reprint-policy-2010-03-10'>Reserved List</a>. 💔 ";
    }
    if ((Model.TypeLine.Contains("Legendary Creature") || Model.OracleText.Contains("can be your commander")) && Model.Legalities.Commander != "banned")
    {
        notes += "This card can be your Commander. 🛡";
    }

    rulings.Data.Insert(0, new Ruling
    {
        Comment = notes,
        PublishedAt = Model.ReleasedAt
    });
}

<div class="pb-2">
    <div class="row">
        <div class="col-md-6">
            @if (Model.ImageUris != null)
            {
                <div class='d-flex justify-content-center'>
                    <div class="card-image">
                        <img class="card card-shadow" src="@Model.ImageUris.Normal" alt="@Model.Name" />
                    </div>
                </div>
            }
        </div>

        <div class="col-md-6">
            <div class="card border-primary">
                <div class="card-header">
                    <span class="oi oi-magnifying-glass"></span> @Model.Name <span class="float-right">@Html.Raw(CardParsingEngine.RenderManaSymbols(Model.ManaCost))</span> <br />
                </div>
                <div class="card-body pb-1">
                    <p class="card-text">@Model.TypeLine</p>
                    <p class="card-text">@Html.Raw(CardParsingEngine.RenderLineBreaks(CardParsingEngine.RenderSymbols(Model.OracleText.Replace("(", "<i>(").Replace(")", ")</i>"))))</p>
                    <p class="card-text"><i>@Model.FlavorText</i></p>

                    @if (!string.IsNullOrEmpty(Model.Power) || !string.IsNullOrEmpty(Model.Toughness))
                    {
                        <p>
                            <span class="float-right">@Model.Power <i class="ms ms-power" title="Power"></i> / @Model.Toughness <i class="ms ms-toughness" title="Toughness"></i></span>
                        </p>
                    }

                    @if (!string.IsNullOrEmpty(Model.Loyalty))
                    {
                        <p>
                            <span class="float-right lead"><i class="ms ms-loyalty-start ms-loyalty-@Model.Loyalty" title="enters the battlefield with @(Model.Loyalty == "1" ? "one" : Model.Loyalty) loyalty counter@(Model.Loyalty == "1" ? string.Empty : "s")"></i></span>
                        </p>
                    }
                </div>
                <div class="card-body pt-1 pb-2">
                    <p>
                        <div class="dropdown">
                            <button type="button" class="btn btn-outline-warning dropdown-toggle" data-toggle="dropdown">@Html.Raw($"<span class='lead'> {CardParsingEngine.RenderSetSymbol(Model.Set, Model.Rarity)}</span>") @Model.SetName [@Model.Set.ToUpper()]</button>
                            <div class="dropdown-menu">
                                <a class="dropdown-item" href="#">Dropdown link</a>
                                <a class="dropdown-item" href="#">Dropdown link</a>
                            </div>
                        </div>

                        <br />

                        @{
                            var rarity = Model.Rarity == "rare" ? "Rare" : Model.Rarity.Replace(Model.Rarity[0].ToString(), Model.Rarity[0].ToString().ToUpper());
                        }

                        @rarity, #@Model.CollectorNumber/@(new ScryfallRequestEngine().SetCardCount(Model.SetUri))

                        <span class="float-right"><i class="ms ms-artist-nib"></i> @Model.Artist</span>
                    </p>
                </div>
                <div class="card-header">
                    <span class="badge badge-pill @(Model.Legalities.Commander == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Commander.Replace("notlegal", "banned")">Commander</span>
                    <span class="badge badge-pill @(Model.Legalities._1V1 == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities._1V1.Replace("notlegal", "banned")">1v1 Commander</span>
                    <span class="badge badge-pill @(Model.Legalities.Brawl == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Brawl.Replace("notlegal", "banned")">Brawl</span>
                    <span class="badge badge-pill @(Model.Legalities.Standard == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Standard.Replace("notlegal", "banned")">Standard</span>
                    <span class="badge badge-pill @(Model.Legalities.Modern == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Modern.Replace("notlegal", "banned")">Modern</span>
                    <span class="badge badge-pill @(Model.Legalities.Legacy == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Legacy.Replace("notlegal", "banned")">Legacy</span>
                    <span class="badge badge-pill @(Model.Legalities.Vintage == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Vintage.Replace("notlegal", "banned")">Vintage</span>
                    <span class="badge badge-pill @(Model.Legalities.Frontier == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Frontier.Replace("notlegal", "banned")">Frontier</span>
                    <span class="badge badge-pill @(Model.Legalities.Pauper == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Pauper.Replace("notlegal", "banned")">Pauper</span>
                    <span class="badge badge-pill @(Model.Legalities.Penny == "legal" ? "badge-success" : "badge-danger")" title="@Model.Legalities.Penny.Replace("notlegal", "banned")">Penny</span>
                </div>
            </div>

            <p />

            <div class="card border-success">
                <div class="card-header"><span class="oi oi-dollar"></span> TCG Player <span class="float-right"><a href="#"><span class="oi oi-cart"></span> Purchase</a></span></div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 text-center">
                            Low <br />
                            <span class="text-muted small">$0.00</span>
                        </div>
                        <div class="col-md-4 text-center">
                            Mid <br />
                            <span class="text-success lead">$0.00</span>
                        </div>
                        <div class="col-md-4 text-center">
                            High <br />
                            <span class="text-danger">$0.00</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="pt-2" style="width: 100%;">
    <div class="card border-dark">
        <div class="card-header"><span class="oi oi-book"></span>Notes & Rulings</div>
        <div class="card-body">
            @foreach (var ruling in rulings.Data)
            {
                <p>
                    @Html.Raw(ruling.Comment) <i class="text-muted small"><br />@(ruling.PublishedAt.HasValue ? ruling.PublishedAt.Value.ToString("MMMM d yyyy") : string.Empty)</i>
                </p>
            }
        </div>
    </div>
</div>