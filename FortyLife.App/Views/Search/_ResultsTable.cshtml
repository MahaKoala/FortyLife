@using System.Runtime.InteropServices
@using FortyLife.Core
@model FortyLife.Models.SearchResultsViewMovel

@{
    var alternater = false;
    string TransformIconName(string name) => $"<span class=\"oi oi-loop-square\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"{name}\"></span>";
    string TransformIconMana(string costHtml) => $"<span class=\"oi oi-loop-square\" data-toggle=\"tooltip\" data-placement=\"bottom\" data-html=\"true\" title=\"{costHtml}\"></span>";
}

<table class="table table-hover">
    <thead>
        <tr class="bg-primary">
            <th>Name</th>
            <th>Mana Cost</th>
            <th class="text-center">Color</th>
            <th class="text-center">Color Identity</th>
            <th>Type</th>
            <th class="text-center">Rarity</th>
            <th>Latest Set</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cardResult in Model.Results.Data)
        {
            var rowClass = alternater ? "bg-active" : "table-default";
            var cardColors = new List<string>();

            if (cardResult.IsDoubleFaced && cardResult.Colors == null)
            {
                cardResult.CardFaces.ForEach(i => cardColors.AddRange(i.Colors));
            }
            else
            {
                cardColors = cardResult.Colors;
            }

            <tr class="@rowClass">
                <td>@Html.Raw(cardResult.IsDoubleFaced ? $"{cardResult.CardFaces[0].Name} {TransformIconName(cardResult.CardFaces[1].Name)}" : cardResult.Name)</td>
                <td>@Html.Raw(cardResult.IsDoubleFaced ? $"{CardParsingEngine.RenderManaSymbols(cardResult.CardFaces[0].ManaCost)} {(!string.IsNullOrEmpty(cardResult.CardFaces[1].ManaCost) ? TransformIconMana(CardParsingEngine.RenderManaSymbols(cardResult.CardFaces[1].ManaCost)) : string.Empty)}" : CardParsingEngine.RenderManaSymbols(cardResult.ManaCost))</td>
                <td>@Html.Raw(CardParsingEngine.RenderColorWheel(cardColors))</td>
                <td>@Html.Raw(CardParsingEngine.RenderColorWheel(cardResult.ColorIdentity))</td>
                <td>@Html.Raw(CardParsingEngine.RenderCardType(cardResult.TypeLine))</td>
                <td class="text-center">@Html.Raw(CardParsingEngine.RenderSetSymbol(cardResult.Set, cardResult.Rarity))</td>
                <td>@cardResult.SetName</td>
            </tr>

            alternater = !alternater;
        }
    </tbody>
</table>